---
title: "Data pipeline ELT project from Synthea to OMOP CDM"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---

TL;DR You can find the project code on [github](https://github.com/kurt1984/synthea_omop_ELT)

This is Lei's work-in-progress portfolio project, illustrating a realistic data pipeline implemented from extracting electronic medical records (EMR), various medical vocabularies, loading onto a database and conducting transformation using dbt, while the workflow is orchestrated, scheduled and monitored using Apache airflow.  

The pipeline process is documented using diagram as code tool [Diagrams](https://diagrams.mingrammer.com/)

```{python}
from diagrams import Diagram, Cluster
from diagrams.onprem.analytics import Dbt
from diagrams.onprem.database import Postgresql
from diagrams.onprem.workflow import Airflow
from diagrams.generic.storage import Storage

with Diagram("Synthea OMOP CDM ELT Workflow", show=False) as diag:

    with Cluster("Orchestration & Scheduler"):    
        Airflow('Apache Airflow')     

    with Cluster("Data Pipeline"):
        [Storage("Synthea "), Storage("Athena Vocab")] >> Postgresql("Postgres") >> Dbt("dbt") 

    
diag
```



## Extraction process

Open sourced [Synthea](https://synthea.mitre.org/) project provides the capability of generating realistic synthetic EMR data, and downloadable data in various formats. The csv files has been used in this project.

[Athena](https://athena.ohdsi.org/search-terms/start) is one of the open sourced tools provided by [OHDSI – Observational Health Data Sciences and Informatics](https://www.ohdsi.org/), greatly simplied the process of converting various medical codes to standard codes. For this project, I downloaded a subset of the codes listed on the website.

## Loading process

At the moment, the csv files from both Synthea and Athena were put in the dbt seeds folder. A better approach is to load the large csv files directly to the database, only store small crosswalks csv in seeds folder.

## Transformation process

dbt were used for the whole transformation process. It is currently the stands for the T step in ETL/ELT process.

The sql codes were adopted from [ETL-Synthea-dbt](https://github.com/sidataplus/ETL-Synthea-dbt/tree/dcb9c262bad32e5d04cd73e4f34a01d884f3e71c) which in turn were adopted from OHDSI tool [OHDSI/ETL-Synthea](https://github.com/OHDSI/ETL-Synthea).

This process is complex in nature. To have a good understanding, I went over following resources:

- [The Book of OHDSI](https://ohdsi.github.io/TheBookOfOhdsi/)
- [OHDSI - YouTube](https://www.youtube.com/@OHDSI)
- [Data Standardization – OHDSI](https://www.ohdsi.org/data-standardization/)

## Orchestration and scheduling

Apache Airflow is the current standard tool for complex workflow orchestration. Although Airflow and dbt share some similarities, dbt is for transformation step, Airflow is the job scheduler for the whole project. It is difficult to grasp such one tool, let alone make both tools work together. Thanks to [Cosmos by Astronomer](https://www.astronomer.io/cosmos/), now it is much easier to setup and make Airflow and dbt work together more harmoniously.

Previously, the common way to use both tools, is just run a airflow bashoperator for dbt. It is not ideal, since it is difficult to see the DAG inside dbt. Now with Cosmo, one can monitor the whole process including the dbt DAG inside Airflow, as the screenshot for this project shown below.

![](airflow_screenshot.png)

## Summary

As you can see, it is a work-in-progress project, the transformation step is not finished. The main purpose of this project is to showcasing the knowledge and skills involved in producing a tailor-made and well-managed workflow using state of the art healthcare data solutions.


